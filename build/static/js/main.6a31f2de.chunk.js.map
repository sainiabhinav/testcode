{"version":3,"sources":["Utils.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["getRandomColor","r","g","b","color","i","Math","floor","random","length","colors","labels","window","parentData","Array","from","map","_","data","label","childData","parent","reduce","currentParentElement","concat","Object","toConsumableArray","generateData","App","_useState","useState","_useState2","slicedToArray","activeCategory","setActiveCategory","chart","useRef","useEffect","parentChart","Chart","type","_ref","datasets","_ref2","_ref3","backgroundColor","_ref4","options","onHover","e","activePoints","getElementsAtEvent","_model","legend","display","element","radius","animation","childChart","_ref5","_ref6","_ref7","_ref8","find","react_default","a","createElement","className","id","ref","onMouseLeave","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a31f2de.chunk.js","sourcesContent":["export const getRandomColor = (r, g, b) => {\n  const letters = \"6789ABC\";\n\n  let color = \"#\";\n  for (let i = 0; i < 6; i++) {\n    if (r && (i === 0 || i === 1)) {\n      if (i === 0) {\n        color += r;\n      }\n    } else if (g && (i === 2 || i === 3)) {\n      if (i === 2) {\n        color += g;\n      }\n    } else if (b && (i === 4 || i === 5)) {\n      if (i === 4) {\n        color += b;\n      }\n    } else {\n      color += letters[Math.floor(Math.random() * letters.length)];\n    }\n  }\n  return color;\n};\n\nexport const colors = [\"Red\", \"Orange\", \"Yellow\", \"Green\", \"Blue\"];\n\nexport const labels = [\"Reservoir\", \"Geophysics\", \"Geology\", \"Production\", \"Petrophysics\"];\n\n\nwindow.getRandomColor = getRandomColor;\n","import { labels, colors, getRandomColor } from \"./Utils\";\n\nexport const generateData = () => {\n  const parentData = Array.from({ length: 5 }).map((_, i) => {\n    return {\n      data: 100 / 5,\n      label: labels[i],\n      color: colors[i],\n      childData: Array.from({ length: 5 }).map(() => {\n        const color = getRandomColor(\n          i === 0 && \"FF\",\n          i === 1 && \"FF\",\n          i === 2 && \"FF\"\n        );\n        return {\n          data: 100 / 5 / 5,\n          label: color,\n          color,\n          parent: labels[i]\n        };\n      })\n    };\n  });\n\n  const childData = parentData.reduce(\n    (childData, currentParentElement) => [\n      ...childData,\n      ...currentParentElement.childData\n    ],\n    []\n  );\n\n  return { parentData, childData };\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport Chart from \"chart.js\";\nimport { generateData } from \"./Data\";\n\nconst { parentData, childData } = generateData();\n\nfunction App() {\n  const [activeCategory, setActiveCategory] = useState(\"\");\n\n  const chart = useRef(null);\n\n  useEffect(() => {\n    if (chart) {\n      const parentChart = new Chart(\"parentChart\", {\n        type: \"pie\",\n        data: {\n          labels: parentData.map(({ label }) => label),\n          datasets: [\n            {\n              label: parentData.map(({ label }) => label),\n              data: parentData.map(({ data }) => data),\n              backgroundColor: parentData.map(({ color }) => color)\n            }\n          ]\n        },\n        options: {\n          onHover: e => {\n            const activePoints = parentChart.getElementsAtEvent(e);\n            setActiveCategory(activePoints[0] && activePoints[0]._model.label);\n          },\n          legend: {\n            display: false\n          },\n          element: {\n            radius: 10\n          },\n          animation: false\n        }\n      });\n\n      const childChart = new Chart(\"childChart\", {\n        type: \"pie\",\n        data: {\n          labels: childData.map(({ label }) => label),\n          datasets: [\n            {\n              label: childData.map(({ label }) => label),\n              data: childData.map(({ data }) => data),\n              backgroundColor: childData.map(({ color, parent }) =>\n                parent === activeCategory ? color : \"white\"\n              )\n            }\n          ]\n        },\n        options: {\n          onHover: e => {\n            const activePoints = childChart.getElementsAtEvent(e);\n            setActiveCategory(\n              activePoints[0] &&\n                childData.find(\n                  data => data.label === activePoints[0]._model.label\n                ).parent\n            );\n          },\n          legend: {\n            display: false\n          },\n          element: {\n            radius: 10\n          },\n          animation: false\n        }\n      });\n    }\n  }, [chart, activeCategory]);\n\n  return (\n    <div className=\"App\">\n      <canvas\n        id=\"childChart\"\n        ref={chart}\n        onMouseLeave={() => setActiveCategory(null)}\n      />\n      <canvas id=\"parentChart\" ref={chart} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}